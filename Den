#!/usr/local/bin/lua

require "luarocks.loader"
require "ursa"

local params = ...
if type(params) ~= "table" then params = nil end -- whoops commandline input

-- Filename list for Glop core
local glop_filenames = {"Base", "Input", "GlopFrameBase", "GlopFrameStyle", "GlopWindow", "System", "Utils", "GlopInternalData", "OpenGl", "Collisions", "Font", "GlopFrameWidgets", "Image", "Thread", "Stream", "glop3d/Camera", "glop3d/Mesh", "glop3d/Point3"}
local glop_filenames_objcpp = {}

-- basic initial setup and configuration
local flags = {}
local local_os

local executable_extension

local deploy_paths = {}

do
  if params.platform then
    ursa.token.rule{"os_name", "!" .. params.platform, function () return params.platform end}
  else
    ursa.token.rule{"os_name", nil, "uname -o || uname"}
  end
    
  local_os = ursa.token{"os_name"}

  if local_os == "Cygwin" then
    local_os = "cygwin"
    
    ursa.token.rule{"CC", nil, function () return "/cygdrive/c/MinGW/bin/g++" end}
    ursa.token.rule{"CXXFLAGS", nil, function () return "-DWIN32 -D_LIB -D_MBCS -IGlop/cygwin/include -IGlop/source -I. -g" end}
    ursa.token.rule{"LDFLAGS", nil, function () return "-LGlop/cygwin/lib -lkernel32 -luser32 -lgdi32 -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 -loleaut32 -luuid -lodbc32 -lodbccp32 -lopengl32 -lfreetype -ljpeg -lglu32 -ldinput -ldxguid -lfmodex -lwinmm -lpng -shared" end}
    
    table.insert(glop_filenames, "OsWin32")
    table.insert(glop_filenames, "Sound")
    
    executable_extension = ".exe"
    
    deploy_paths.lib = "glop/lib/libGlop.dll"
    deploy_paths.headers = "local/include/Glop"
  elseif local_os == "Darwin" then
    local_os = "osx"
    
    ursa.token.rule{"CC", nil, function () return "g++" end}
    ursa.token.rule{"CXXFLAGS", nil, function () return "-arch i386 -DMACOSX -D_DEBUG -IGlop/OSX -IGlop/source -I. -g" end}
    ursa.token.rule{"LDFLAGS", nil, function () return "-arch i386 -LGlop/OSX/lib -lfmodex -lfreetype235 -ljpeg6b -lpng -lrakneti386 -lz -F/System/Library/Frameworks -framework Carbon -framework AGL -framework OpenGL -framework ApplicationServices -framework IOKit -dynamiclib -Wl,-single_module -compatibility_version 1 -current_version 1 -mmacosx-version-min=10.5 -headerpad_max_install_names -install_name @executable_path/../Frameworks/Glop.framework/Glop" end}
    
    table.insert(glop_filenames, "OsMacOSX")
    table.insert(glop_filenames, "Sound")
    
    executable_extension = "app"  -- much of this needs to be redesigned
    
    deploy_paths.lib = "Glop.framework/Glop"
    deploy_paths.headers = "Glop.framework/Headers"
  elseif local_os == "iphone_sim" then
    local_os = "iphone_sim"
    
    ursa.token.rule{"CC", nil, function () return "/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/g++" end}
    ursa.token.rule{"CXXFLAGS", nil, function () return "-D__IPHONE_OS_VERSION_MIN_REQUIRED=30000 -arch i386 -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator3.0.sdk -mmacosx-version-min=10.5 -Fglorp/Glop/build/Glop -DIPHONE -IGlop/OSX -IGlop/source" end}
    ursa.token.rule{"LDFLAGS", nil, function () return "-dynamiclib -arch i386 -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator3.0.sdk -mmacosx-version-min=10.5 -framework Foundation -framework UIKit -framework OpenGLES -framework QuartzCore -framework AVFoundation -LGlop/OSX/lib -ljpeg6b -lfreetype235 -lpng -lz" end}
    
    table.insert(glop_filenames_objcpp, "OsIphone")
    table.insert(glop_filenames_objcpp, "OsIphone_EAGLView")
    table.insert(glop_filenames_objcpp, "Sound_Iphone")
    
    executable_extension = "app"
    
    deploy_paths.lib = "Glop.framework/Glop"
    deploy_paths.headers = "Glop.framework/Headers"
  else
    print("unknown OS", local_os)
    assert(false)
  end
end

-- parse the result from g++'s built-in dependency scanner
local function make_dependencies(srcfile)
  local deps = ursa.util.system{("%s %s -MM %s"):format(ursa.token{"CC"}, ursa.token{"CXXFLAGS"}, srcfile)}
  deps = deps:match("^.*: (.*)$")
  
  local dependencies = {}
  for file in deps:gmatch("([^%s]+)") do
    if file ~= "\\" then
      table.insert(dependencies, file)
    end
  end
  
  return dependencies
end

-- build the source files
local objects = {}
for _, file in ipairs(glop_filenames) do
  local cpp = "Glop/source/" .. file .. ".cpp"
  local o = "build/Glop/" .. file .. ".o"
  local depend = "Glop/" .. file .. " dependencies"
  
  ursa.token.rule{depend, ursa.util.token_deferred{depend, default = cpp}, function () return make_dependencies(cpp) end}
  table.insert(objects, ursa.rule{o, ursa.util.token_deferred{depend}, ursa.util.system_template{("#CC -O2 #CXXFLAGS -o %s -c %s"):format(o, cpp)}})
end
for _, file in ipairs(glop_filenames_objcpp) do
  local cpp = "Glop/source/" .. file .. ".mm"
  local o = "build/Glop/" .. file .. ".o"
  local depend = "Glop/" .. file .. " dependencies"
  
  ursa.token.rule{depend, ursa.util.token_deferred{depend, default = cpp}, function () return make_dependencies(cpp) end}
  table.insert(objects, ursa.rule{o, ursa.util.token_deferred{depend}, ursa.util.system_template{("#CC -O2 #CXXFLAGS -o %s -c %s"):format(o, cpp)}})
end

local lib = nil
local headers = {}

-- build the glop library
lib = ursa.rule{"build/Glop/" .. deploy_paths.lib, objects, ursa.util.system_template{"#CC -O2 -o $TARGET $SOURCES #LDFLAGS"}}

-- mirror source files into the appropriate build directory
ursa.token.rule{"headers", nil, "cd Glop/source && find . -type f | sed s*\\\\./** | grep \\.h$"}
for k in ursa.token{"headers"}:gmatch("[^%s]+") do
  table.insert(headers, ursa.rule{"build/Glop/" .. deploy_paths.headers .. "/" .. k, "Glop/source/" .. k, ursa.util.system_template{"cp $SOURCE $TARGET"}})
end

ursa.command{"glop", {lib, headers}}



-- let's have some actual apps
local applist = {}
local function BuildApp(appname, files)
  local objects = {}
  for _, file in ipairs(files) do
    local cpp = ("%s/%s.cpp"):format(appname, file)
    local o = ("build/%s/%s.o"):format(appname, file)
    local depend = ("%s/%s dependencies"):format(appname, file)
    
    ursa.token.rule{depend, {headers, ursa.util.token_deferred{depend, default = cpp}}, function () return make_dependencies(cpp) end}
    table.insert(objects, ursa.rule{o, {headers, ursa.util.token_deferred{depend}}, ursa.util.system_template{("#CC -O2 #CXXFLAGS -o %s -c %s"):format(o, cpp)}})
  end
  
  local out = "build/" .. appname .. executable_extension
  table.insert(applist, ursa.rule{out, {objects, lib}, ursa.util.system_template{"#CC -O2 -o $TARGET $SOURCES #LDFLAGS"}})
end

BuildApp("Tests", {"Tests"})

ursa.command{ursa.command.default, applist}

-- clean things up properly

if not clean_dirs then clean_dirs = {} end
table.insert(clean_dirs, "build/Glop/glop3d")
table.insert(clean_dirs, "build/Glop")
table.insert(clean_dirs, "build/Tests")
table.insert(clean_dirs, "build")

ursa.command{"clean", function ()
  ursa.util.clean()
  for _, v in ipairs(clean_dirs) do
    os.remove(v)
  end
end}

ursa.build{...}


return {lib = lib, headers = headers, os = local_os, cc = ursa.token{"CC"}} -- just in case we're being shelled by something, here's the glop package data
