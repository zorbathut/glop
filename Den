#!/usr/local/bin/lua

require "luarocks.loader"
require "ursa"

-- Filename list for Glop core
local glop_filenames = {"Base", "Input", "GlopFrameBase", "GlopFrameStyle", "GlopWindow", "System", "Utils", "GlopInternalData", "OpenGl", "Collisions", "Font", "GlopFrameWidgets", "Image", "Thread", "Sound", "Stream", "glop3d/Camera", "glop3d/Mesh", "glop3d/Point3"}

-- basic initial setup and configuration
local flags = {}
do
  ursa.token{"os_name", nil, "uname -o"}
  local local_os = ursa.value{"os_name"}

  if local_os == "Cygwin" then
    local_os = "cygwin"
    
    flags.cxx = "-mno-cygwin -DWIN32 -D_LIB -D_MBCS -I/usr/local/include"
    flags.ld = "-mno-cygwin -LGlop/cygwin/lib -L/lib/mingw -lkernel32 -luser32 -lgdi32 -lwinspool -lcomdlg32 -ladvapi32 -lshell32 -lole32 -loleaut32 -luuid -lodbc32 -lodbccp32 -lopengl32 -lfreetype -ljpeg -lglu32 -ldinput -ldxguid -lfmodex -lwinmm -lpng"
    
    table.insert(glop_filenames, "OsWin32")
  else
    assert(false)
  end
  
  flags.cxx = flags.cxx .. " -IGlop/cygwin/include -IGlop/source -I. -O2 -g"
end

-- parse the result from g++'s built-in dependency scanner
local function make_dependencies(srcfile)
  local deps = ursa.util.system(("g++ %s -MM %s"):format(flags.cxx, srcfile))
  deps = deps:match("^.*: (.*)$")
  
  local dependencies = {}
  for file in deps:gmatch("([^ \n\t]+)") do
    if file ~= "\\" then
      table.insert(dependencies, file)
    end
  end
  
  return dependencies
end

-- build the source files
local objects = {}
for _, file in ipairs(glop_filenames) do
  local cpp = "Glop/source/" .. file .. ".cpp"
  local o = "build/Glop/" .. file .. ".o"
  local depend = "Glop/" .. file .. " dependencies"
  
  ursa.token{depend, ursa.util.value_deferred{depend, default = cpp}, function () return make_dependencies(cpp) end}
  ursa.rule{o, ursa.util.value_deferred{depend}, ("g++ %s -o %s -c %s"):format(flags.cxx, o, cpp)}
  table.insert(objects, o)
end

-- build the glop library
ursa.rule{"build/libGlop.a", objects, "ar rc build/libGlop.a " .. table.concat(objects, " ")}

ursa.command{"glop", "build/libGlop.a"}


-- let's have some actual apps
local applist = {}
local function BuildApp(appname, files)
  local objects = {}
  for _, file in ipairs(files) do
    local cpp = ("%s/%s.cpp"):format(appname, file)
    local o = ("build/%s/%s.o"):format(appname, file)
    local depend = ("%s/%s dependencies"):format(appname, file)
    
    ursa.token{depend, ursa.util.value_deferred{depend, default = cpp}, function () return make_dependencies(cpp) end}
    ursa.rule{o, ursa.util.value_deferred{depend}, ("g++ %s -o %s -c %s"):format(flags.cxx, o, cpp)}
    table.insert(objects, o)
  end
  
  local out = "build/" .. appname .. ".exe"
  ursa.rule{out, {objects, "build/libGlop.a"}, ("g++ -o %s %s %s %s"):format(out, table.concat(objects, " "), "build/libGlop.a", flags.ld)}
  table.insert(applist, out)
end

BuildApp("Tests", {"Tests"})

ursa.command{ursa.command.default, applist}


ursa.build{...}
