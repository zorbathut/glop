#!/usr/local/bin/lua

require "luarocks.loader"
require "ursa"

local params = ...
if type(params) ~= "table" then params = nil end -- whoops commandline input

-- Filename list for Glop core
local glop_filenames = {"Base", "Input", "GlopFrameBase", "GlopFrameStyle", "GlopWindow", "System", "Utils", "GlopInternalData", "OpenGl", "Collisions", "Font", "GlopFrameWidgets", "Image", "Thread", "Stream", "glop3d/Camera", "glop3d/Mesh", "glop3d/Point3"}
local glop_filenames_objcpp = {}

-- basic initial setup and configuration
local flags = {}
local local_os
local build_prefix

local deploy_paths = {}

local fmodex_path

do
  if params and params.platform then
    ursa.token.rule{"os_name", "!" .. params.platform, function () return params.platform end}
  else
    ursa.token.rule{"os_name", nil, "uname -o || uname"}
  end
    
  local_os = ursa.token{"os_name"}

  if local_os == "Cygwin" then
    local_os = "cygwin"
    
    ursa.token.rule{"CC", nil, function () return "/cygdrive/c/Qt/2010.04/mingw/bin/g++" end}
    ursa.token.rule{"CXXFLAGS_BASE", nil, function () return "-DWIN32 -D_LIB -D_MBCS" end}
    
    ursa.token.rule{"LIBCC", nil, function () return "/cygdrive/c/Qt/2010.04/mingw/bin/gcc" end}
    ursa.token.rule{"LIBCFLAGS_BASE", nil, function () return "" end}
    ursa.token.rule{"LIBLDFLAGS_BASE", nil, function () return "" end}
    
    table.insert(glop_filenames, "OsWin32")
    table.insert(glop_filenames, "Sound")
    
    fmodex_path = "Glop/third_party/system_cygwin/lib/libfmodex.a"
    fmodex_copy = true
    
    deploy_paths.lib_name = "libGlop.a"
  elseif local_os == "Darwin" then
    local_os = "osx"
    
    -- complexity is obviously for support of OSX 10.5
    ursa.token.rule{"CC", nil, function () return "g++" end}
    ursa.token.rule{"CXXFLAGS_BASE", nil, function () return "-isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386 -DMACOSX -D_DEBUG" end}
    
    ursa.token.rule{"LIBCC", nil, function () return "gcc" end}
    ursa.token.rule{"LIBCFLAGS_BASE", nil, function () return "-isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386" end}
    ursa.token.rule{"LIBLDFLAGS_BASE", nil, function () return "-isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5 -arch i386" end}
    
    table.insert(glop_filenames, "OsMacOSX")
    table.insert(glop_filenames, "Sound")
    
    fmodex_path = "Glop/third_party/system_osx/lib/libfmodex.dylib"
    
    deploy_paths.lib_name = "Glop"
  elseif local_os == "GNU/Linux" then
    local_os = "linux"
    
    ursa.token.rule{"CC", nil, function () return "g++" end}
    ursa.token.rule{"CXXFLAGS_BASE", nil, function () return "-m32 -DLINUX" end}
    
    ursa.token.rule{"LIBCC", nil, function () return "gcc" end}
    ursa.token.rule{"LIBCFLAGS_BASE", nil, function () return "-m32" end}
    ursa.token.rule{"LIBLDFLAGS_BASE", nil, function () return "-m32" end}
    
    table.insert(glop_filenames, "OsLinux")
    table.insert(glop_filenames, "OsLinux_TerribleXPassthrough")
    table.insert(glop_filenames, "Sound")
    
    fmodex_path = "Glop/third_party/system_linux/lib/libfmodex.so"
    
    deploy_paths.lib_name = "libGlop.a"
  elseif local_os == "iphone_sim" then
    local_os = "iphone_sim"
    
    ursa.token.rule{"CC", nil, function () return "/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/g++" end}
    ursa.token.rule{"CXXFLAGS_BASE", nil, function () return "-D__IPHONE_OS_VERSION_MIN_REQUIRED=30000 -arch i386 -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator3.0.sdk -mmacosx-version-min=10.5 -DIPHONE -IGlop" end}
    
    ursa.token.rule{"LIBCC", nil, function () return "/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/gcc" end}
    ursa.token.rule{"LIBCFLAGS_BASE", nil, function () return "-arch i386 -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator3.0.sdk -mmacosx-version-min=10.5" end}
    ursa.token.rule{"LIBLDFLAGS_BASE", nil, function () return "-arch i386 -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator3.0.sdk -mmacosx-version-min=10.5" end}
    
    --ursa.token.rule{"LDFLAGS", nil, function () return "-arch i386 -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator3.0.sdk -mmacosx-version-min=10.5 -framework Foundation -framework UIKit -framework OpenGLES -framework QuartzCore -framework AVFoundation -ljpeg6b -lfreetype235 -lpng -lz" end}
    
    table.insert(glop_filenames_objcpp, "OsIphone")
    table.insert(glop_filenames_objcpp, "OsIphone_EAGLView")
    table.insert(glop_filenames_objcpp, "Sound_Iphone")
    
    deploy_paths.lib_name = "Glop"
  elseif local_os == "iphone_dev" then
    local_os = "iphone_dev"
    
    ursa.token.rule{"CC", nil, function () return "/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc-4.2" end}
    ursa.token.rule{"CXXFLAGS", nil, function () return "-D__IPHONE_OS_VERSION_MIN_REQUIRED=30000 -arch armv6 -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS3.1.2.sdk -DIPHONE -IGlop" end}
    ursa.token.rule{"LDFLAGS", nil, function () return "-arch armv6 -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS3.1.2.sdk -framework Foundation -framework UIKit -framework OpenGLES -framework QuartzCore -framework AVFoundation -ljpeg6b -lfreetype235 -lpng -lz" end}
    
    table.insert(glop_filenames_objcpp, "OsIphone")
    table.insert(glop_filenames_objcpp, "OsIphone_EAGLView")
    table.insert(glop_filenames_objcpp, "Sound_Iphone")
    
    deploy_paths.lib = "Glop.framework/Glop"
    deploy_paths.headers = "Glop.framework/Headers"
  else
    print("unknown OS", local_os)
    assert(false)
  end
  
  build_prefix = "build/" .. local_os
  release_prefix = "release/" .. local_os
  
  deploy_paths.lib = release_prefix .. "/lib/" .. deploy_paths.lib_name
end

ursa.token.rule{"CXXFLAGS", {"#CXXFLAGS_BASE", (params.minimal and "!minimal" or "!full")}, function () return ursa.token{"CXXFLAGS_BASE"} .. " -Ibuild/" .. local_os .. "/libs_complete/include -IGlop -I. -g" .. (params.minimal and " -DGLOP_LEAN_AND_MEAN" or "") end}

ursa.token.rule{"LIBCFLAGS", "#LIBCFLAGS_BASE", function () return ursa.token{"LIBCFLAGS_BASE"} .. " -I../../libs_complete/include" end}
ursa.token.rule{"LIBLDFLAGS", "#LIBLDFLAGS_BASE", function () return ursa.token{"LIBLDFLAGS_BASE"} .. " -L../../libs_complete/lib" end}

local final_libs = {}

-- yo dogg, who likes libraries
-- first we do zlib
local zlib = {} -- filled with everything needed to consider "zlib" to be functional
do
  local zlib_dir = "Glop/third_party/zlib-1.2.3"
  
  --ursa.token.rule{"zlib files", nil, ("cd %s && find . -type f | sed s*\\\\./**"):format(zlib_dir)}  -- we are assuming this isn't changing
  ursa.token.rule{"zlib files", nil, ("cd %s && find . -maxdepth 1 -type f | sed s*\\\\./**"):format(zlib_dir)}  -- we are assuming this isn't changing
  local zlib_files = {}
  for file in ursa.token{"zlib files"}:gmatch("([^\n]+)") do
    table.insert(zlib_files, ursa.rule{build_prefix .. "/libs/zlib/" .. file, zlib_dir .. "/" .. file, ursa.util.copy{}})
  end
  
  local makefile = ursa.rule{{build_prefix .. "/libs/zlib/Makefile", build_prefix .. "/libs/zlib/zconf.h"}, zlib_files, ursa.util.system_template{('cd %s/libs/zlib && CC=#LIBCC CFLAGS="#LIBCFLAGS" LDFLAGS="#LIBLDFLAGS" ./configure'):format(build_prefix)}}
  
  local lib = ursa.rule{build_prefix .. "/libs/zlib/libz.a", {makefile, zlib_files}, ('cd %s/libs/zlib && make -j5'):format(build_prefix)}
  
  -- now we copy shit to the right place
  final_libs.zlib = ursa.rule{build_prefix .. "/libs_complete/lib/libz.a", lib, ursa.util.copy{}}
  table.insert(zlib, ursa.rule{build_prefix .. "/libs_complete/include/zlib.h", build_prefix .. "/libs/zlib/zlib.h", ursa.util.copy{}})
  table.insert(zlib, ursa.rule{build_prefix .. "/libs_complete/include/zconf.h", build_prefix .. "/libs/zlib/zconf.h", ursa.util.copy{}})
end

-- libpng next
local libpng = {} -- filled with everything needed to consider "libpng" to be functional
do
  local libpng_dir = "Glop/third_party/libpng-1.4.3"
  
  --ursa.token.rule{"libpng files", nil, ("cd %s && find . -type f | sed s*\\\\./**"):format(libpng_dir)}  -- we are assuming this isn't changing
  ursa.token.rule{"libpng files", nil, ("cd %s && find . -maxdepth 1 -type f | sed s*\\\\./**"):format(libpng_dir)}  -- we are assuming this isn't changing
  local libpng_files = {}
  for file in ursa.token{"libpng files"}:gmatch("([^\n]+)") do
    table.insert(libpng_files, ursa.rule{build_prefix .. "/libs/libpng/" .. file, libpng_dir .. "/" .. file, ursa.util.copy{}})
  end
  
  local makefile = ursa.rule{{build_prefix .. "/libs/libpng/Makefile"}, {libpng_files, zlib, final_libs.zlib}, ursa.util.system_template{('cd %s/libs/libpng && CC=#LIBCC CFLAGS="#LIBCFLAGS" LDFLAGS="#LIBLDFLAGS" ./configure --disable-dependency-tracking'):format(build_prefix)}}
  
  local lib = ursa.rule{build_prefix .. "/libs/libpng/.libs/libpng14.a", {makefile, libpng_files}, ('cd %s/libs/libpng && make -j5'):format(build_prefix)}
  
  -- now we copy shit to the right place
  final_libs.libpng = ursa.rule{build_prefix .. "/libs_complete/lib/libpng.a", lib, ursa.util.copy{}}
  table.insert(libpng, ursa.rule{build_prefix .. "/libs_complete/include/png.h", build_prefix .. "/libs/libpng/png.h", ursa.util.copy{}})
  table.insert(libpng, ursa.rule{build_prefix .. "/libs_complete/include/pngconf.h", build_prefix .. "/libs/libpng/pngconf.h", ursa.util.copy{}})
end

-- libjpeg next . . . ish
local libjpeg = {} -- filled with everything needed to consider "libjpeg" to be functional
do
  local libjpeg_dir = "Glop/third_party/jpeg-8a"
  
  ursa.token.rule{"libjpeg files", nil, ("cd %s && find . -type f | sed s*\\\\./**"):format(libjpeg_dir)}  -- we are assuming this isn't changing
  local libjpeg_files = {}
  for file in ursa.token{"libjpeg files"}:gmatch("([^\n]+)") do
    table.insert(libjpeg_files, ursa.rule{build_prefix .. "/libs/libjpeg/" .. file, libjpeg_dir .. "/" .. file, ursa.util.copy{}})
  end
  
  local makefile = ursa.rule{{build_prefix .. "/libs/libjpeg/Makefile", build_prefix .. "/libs/libjpeg/jconfig.h"}, libjpeg_files, ursa.util.system_template{('cd %s/libs/libjpeg && CC=#LIBCC CFLAGS="#LIBCFLAGS" LDFLAGS="#LIBLDFLAGS" ./configure --disable-dependency-tracking'):format(build_prefix)}}
  
  local lib = ursa.rule{build_prefix .. "/libs/libjpeg/.libs/libjpeg.a", {makefile, libjpeg_files}, ('cd %s/libs/libjpeg && make clean && make -j5'):format(build_prefix)}
  
  -- now we copy shit to the right place
  final_libs.libjpeg = ursa.rule{build_prefix .. "/libs_complete/lib/libjpeg.a", lib, ursa.util.copy{}}
  table.insert(libjpeg, ursa.rule{build_prefix .. "/libs_complete/include/jpeglib/jpeglib.h", build_prefix .. "/libs/libjpeg/jpeglib.h", ursa.util.copy{}})
  table.insert(libjpeg, ursa.rule{build_prefix .. "/libs_complete/include/jpeglib/jconfig.h", build_prefix .. "/libs/libjpeg/jconfig.h", ursa.util.copy{}})
  table.insert(libjpeg, ursa.rule{build_prefix .. "/libs_complete/include/jpeglib/jmorecfg.h", build_prefix .. "/libs/libjpeg/jmorecfg.h", ursa.util.copy{}})
end

-- and freetype last, whatever last means
local libfreetype = {} -- filled with everything needed to consider "libfreetype" to be functional
do
  local libfreetype_dir = "Glop/third_party/freetype-2.3.12"
  
  --ursa.token.rule{"libfreetype files", nil, ("cd %s && find . -type f | sed s*\\\\./**"):format(libfreetype_dir)}  -- we are assuming this isn't changing
  ursa.token.rule{"libfreetype files", nil, ("cd %s && ((find . -type f | grep -v builds | grep -v docs | sed s*\\\\./**) && find builds/ -maxdepth 1 -type f && find builds/unix/ -type f)"):format(libfreetype_dir)}  -- we are assuming this isn't changing
  
  local libfreetype_files = {}
  for file in ursa.token{"libfreetype files"}:gmatch("([^\n]+)") do
    if file == "builds/unix/unix-def.in" then
      table.insert(libfreetype_files, ursa.rule{build_prefix .. "/libs/libfreetype/" .. file, libfreetype_dir .. "/" .. file, ursa.util.system_template{'sed "s/TOP_DIR := .*/TOP_DIR := ./" $SOURCE > $TARGET'}})
    else
      table.insert(libfreetype_files, ursa.rule{build_prefix .. "/libs/libfreetype/" .. file, libfreetype_dir .. "/" .. file, ursa.util.copy{}})
    end
    
    if file:match("^include.*") then
      table.insert(libfreetype, ursa.rule{build_prefix .. "/libs_complete/include/" .. file:match("include/(.*)"), libfreetype_dir .. "/" .. file, ursa.util.copy{}})
    end
  end
  
  local makefile = ursa.rule{{build_prefix .. "/libs/libfreetype/builds/unix/freetype-config"}, libfreetype_files, ursa.util.system_template{('cd %s/libs/libfreetype && CC=#LIBCC CFLAGS="#LIBCFLAGS" LDFLAGS="#LIBLDFLAGS" ./configure'):format(build_prefix)}}
  
  local lib = ursa.rule{build_prefix .. "/libs/libfreetype/objs/.libs/libfreetype.a", {makefile, libfreetype_files}, ('cd %s/libs/libfreetype && make -j5'):format(build_prefix)}
  
  -- now we copy shit to the right place
  final_libs.libfreetype = ursa.rule{build_prefix .. "/libs_complete/lib/libfreetype.a", lib, ursa.util.copy{}}
end

-- we have our "core libraries"
local core = {}
do
  local core_dir = "Glop/third_party/system_" .. local_os
  
  ursa.token.rule{"core files", nil, ("(cd %s && find . -type f | sed s*\\\\./**) || true"):format(core_dir)}  -- we are assuming this isn't changing
  local libjpeg_files = {}
  for file in ursa.token{"core files"}:gmatch("([^\n]+)") do
    table.insert(core, ursa.rule{build_prefix .. "/libs_complete/" .. file, core_dir .. "/" .. file, ursa.util.copy{}})
  end
end

final_libs.libfmodex = fmodex_path

local libs = {zlib, libpng, libjpeg, libfreetype, core}

-- parse the result from g++'s built-in dependency scanner
local function make_dependencies(srcfile)
  local deps = ursa.system{("%s %s -MM %s"):format(ursa.token{"CC"}, ursa.token{"CXXFLAGS"}, srcfile)}
  deps = deps:match("^.*: (.*)$")
  
  local dependencies = {}
  for file in deps:gmatch("([^%s]+)") do
    if file ~= "\\" then
      table.insert(dependencies, file)
    end
  end
  
  return dependencies
end

-- build the source files
local objects = {}
for _, file in ipairs(glop_filenames) do
  local cpp = "Glop/" .. file .. ".cpp"
  local o = build_prefix .. "/Glop/" .. file .. ".o"
  local depend = "Glop/" .. file .. " dependencies"
  
  ursa.token.rule{depend, {libs, ursa.util.token_deferred{depend, default = cpp}}, function () return make_dependencies(cpp) end}
  table.insert(objects, ursa.rule{o, ursa.util.token_deferred{depend}, ursa.util.system_template{("#CC -O2 #CXXFLAGS -o %s -c %s"):format(o, cpp)}})
end
for _, file in ipairs(glop_filenames_objcpp) do
  local cpp = "Glop/" .. file .. ".mm"
  local o = build_prefix .. "/Glop/" .. file .. ".o"
  local depend = "Glop/" .. file .. " dependencies"
  
  ursa.token.rule{depend, {libs, ursa.util.token_deferred{depend, default = cpp}}, function () return make_dependencies(cpp) end}
  table.insert(objects, ursa.rule{o, ursa.util.token_deferred{depend}, ursa.util.system_template{("#CC -O2 #CXXFLAGS -o %s -c %s"):format(o, cpp)}})
end

local lib = nil
local headers = {libs}

-- mirror headers into the appropriate build directory
ursa.token.rule{"headers", nil, "cd Glop && find . -type f | grep -v third_party | sed s*\\\\./** | grep \\.h$"}
for k in ursa.token{"headers"}:gmatch("[^%s]+") do
  table.insert(headers, ursa.rule{release_prefix .. "/include/Glop/" .. k, "Glop/" .. k, ursa.util.copy{}})
end

-- build the glop sublibraries
local outlibs = {}
for k, v in pairs(final_libs) do
  local items = ursa.relative_from{v}
  if type(items) == "table" then items = items[1] end
  outlibs[k] = ursa.rule{release_prefix .. "/lib/" .. items:match(".*/([^/]+)$"), v, ursa.util.copy{}}
end

-- build the glop library
outlibs.glop = ursa.rule{deploy_paths.lib, {objects, (fmodex_path or {})}, ursa.util.system_template{"rm -f $TARGET && ar rcs $TARGET $SOURCES"}}

-- include sublibrary headers. this is kind of nasty right now because we're using find to, well, find them. this would be very bad if we weren't using all libraries reliably, but right now we are, so this is okay (sorta)
ursa.token.rule{"release_lib_headers", libs, ("cd %s/libs_complete/include && find . -type f | sed s*\\\\./**"):format(build_prefix)}
ursa.token.rule{"release_lib_headers_copy", "#release_lib_headers", function ()
  local rlhc = {}
  for k in ursa.token{"release_lib_headers"}:gmatch("[^\n]+") do
    table.insert(rlhc, ursa.rule{release_prefix .. "/include/" .. k, build_prefix .. "/libs_complete/include/" .. k, ursa.util.copy{}})
  end
  return rlhc
end, always_rebuild = true}
table.insert(headers, ursa.util.token_deferred{"release_lib_headers_copy"})



ursa.command{"glop", {outlibs.glop, headers}}



ursa.command{ursa.command.default, {outlibs.glop, headers}}

-- clean things up properly

if not clean_dirs then clean_dirs = {} end
table.insert(clean_dirs, "build")
table.insert(clean_dirs, "release")
ursa.command{"clean", function ()
  ursa.util.clean()
  for _, v in ipairs(clean_dirs) do
    os.remove(v)
  end
end}

if not params then
  ursa.build{...}
end


return {libs = outlibs, headers = headers, os = local_os, cc = ursa.token{"CC"}, libcc = ursa.token{"LIBCC"}, libcflags = ursa.token{"LIBCFLAGS"}, libldflags = ursa.token{"LIBLDFLAGS"}} -- just in case we're being shelled by something, here's the glop package data
